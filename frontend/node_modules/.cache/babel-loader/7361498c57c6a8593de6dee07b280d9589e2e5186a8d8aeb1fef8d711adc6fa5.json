{"ast":null,"code":"// import React, { useState } from \"react\";\n// import CreateIcon from \"@material-ui/icons/Create\";\n// import {\n//   Box,\n//   Button,\n//   Snackbar,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow\n// } from \"@material-ui/core\";\n// import DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\n// import AddBoxIcon from \"@material-ui/icons/AddBox\";\n// import DoneIcon from \"@material-ui/icons/Done\";\n// import ClearIcon from \"@material-ui/icons/Clear\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Alert from \"@material-ui/lab/Alert\";\n// import Dialog from \"@material-ui/core/Dialog\";\n// import DialogActions from \"@material-ui/core/DialogActions\";\n// import DialogContent from \"@material-ui/core/DialogContent\";\n// import DialogContentText from \"@material-ui/core/DialogContentText\";\n// import DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// // Creating styles\n// const useStyles = makeStyles({\n//   root: {\n//     \"& > *\": {\n//       borderBottom: \"unset\"\n//     }\n//   },\n//   table: {\n//     minWidth: 650\n//   },\n//   snackbar: {\n//     bottom: \"104px\"\n//   }\n// });\n\n// function TableDemo() {\n//   // Creating style object\n//   const classes = useStyles();\n\n//   // Defining a state named rows\n//   // which we can update by calling on setRows function\n//   const [rows, setRows] = useState([\n//     { id: 1, slno: \"\", complaints: \"\", duration: \"\", severity: \"\" }\n//   ]);\n\n//   // Initial states\n//   const [open, setOpen] = React.useState(false);\n//   const [isEdit, setEdit] = React.useState(false);\n//   const [disable, setDisable] = React.useState(true);\n//   const [showConfirm, setShowConfirm] = React.useState(false);\n\n//   // Function For closing the alert snackbar\n//   const handleClose = (event, reason) => {\n//     if (reason === \"clickaway\") {\n//       return;\n//     }\n//     setOpen(false);\n//   };\n\n//   // Function For adding new row object\n//   const handleAdd = () => {\n//     setRows([\n//       ...rows,\n//       {\n//         id: rows.length + 1,\n//         slno: \"\",\n//         complaints: \"\",\n//         duration: \"\",\n//         severity: \"\"\n//       }\n//     ]);\n//     setEdit(true);\n//   };\n\n//   // Function to handle edit\n//   const handleEdit = (i) => {\n//     // If edit mode is true setEdit will\n//     // set it to false and vice versa\n//     setEdit(!isEdit);\n//   };\n\n//   // Function to handle save\n//   const handleSave = () => {\n//     setEdit(!isEdit);\n//     setRows(rows);\n//     console.log(\"saved : \", rows);\n//     setDisable(true);\n//     setOpen(true);\n//   };\n\n//   // The handleInputChange handler can be set up to handle\n//   // many different inputs in the form, listen for changes\n//   // to input elements and record their values in state\n//   const handleInputChange = (e, index) => {\n//     setDisable(false);\n//     const { name, value } = e.target;\n//     const list = [...rows];\n//     list[index][name] = value;\n//     setRows(list);\n//   };\n\n//   // Showing delete confirmation to users\n//   const handleConfirm = () => {\n//     setShowConfirm(true);\n//   };\n\n//   // Handle the case of delete confirmation where\n//   // user click yes delete a specific row of id:i\n//   const handleRemoveClick = (i) => {\n//     const list = [...rows];\n//     list.splice(i, 1);\n//     setRows(list);\n//     setShowConfirm(false);\n//   };\n\n//   // Handle the case of delete confirmation\n//   // where user click no\n//   const handleNo = () => {\n//     setShowConfirm(false);\n//   };\n\n//   return (\n//     <TableBody>\n//       <Snackbar\n//         open={open}\n//         autoHideDuration={2000}\n//         onClose={handleClose}\n//         className={classes.snackbar}\n//       >\n//         <Alert onClose={handleClose} severity=\"success\">\n//           Record saved successfully!\n//         </Alert>\n//       </Snackbar>\n//       <Box margin={1}>\n//         <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//           <div>\n//             {isEdit ? (\n//               <div>\n//                 <Button onClick={handleAdd}>\n//                   <AddBoxIcon onClick={handleAdd} />\n//                   ADD\n//                 </Button>\n//                 {rows.length !== 0 && (\n//                   <div>\n//                     {disable ? (\n//                       <Button disabled align=\"right\" onClick={handleSave}>\n//                         <DoneIcon />\n//                         SAVE\n//                       </Button>\n//                     ) : (\n//                       <Button align=\"right\" onClick={handleSave}>\n//                         <DoneIcon />\n//                         SAVE\n//                       </Button>\n//                     )}\n//                   </div>\n//                 )}\n//               </div>\n//             ) : (\n//               <div>\n//                 <Button onClick={handleAdd}>\n//                   <AddBoxIcon onClick={handleAdd} />\n//                   ADD\n//                 </Button>\n//                 <Button align=\"right\" onClick={handleEdit}>\n//                   <CreateIcon />\n//                   EDIT\n//                 </Button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//         <TableRow align=\"center\"></TableRow>\n\n//         <Table\n//           className={classes.table}\n//           size=\"small\"\n//           aria-label=\"a dense table\"\n//         >\n//           <TableHead>\n//             <TableRow>\n//               <TableCell></TableCell>\n//               <TableCell></TableCell>\n//               <TableCell></TableCell>\n//               <TableCell align=\"center\"></TableCell>\n//               <TableCell align=\"center\"></TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {rows.map((row, i) => {\n//               return (\n//                 <div>\n//                   <TableRow>\n//                     {isEdit ? (\n//                       <div>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Sl no\"\n//                             value={row.slno}\n//                             name=\"slno\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Complaints\"\n//                             value={row.complaints}\n//                             name=\"complaints\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Duration\"\n//                             name=\"duration\"\n//                             value={row.duration}\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Severity\"\n//                             value={row.severity}\n//                             name=\"severity\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                       </div>\n//                     ) : (\n//                       <div>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {row.slno}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {row.complaints}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\" align=\"center\">\n//                           {row.duration}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\" align=\"center\">\n//                           {row.severity}\n//                         </TableCell>\n//                         <TableCell\n//                           component=\"th\"\n//                           scope=\"row\"\n//                           align=\"center\"\n//                         ></TableCell>\n//                       </div>\n//                     )}\n//                     {isEdit ? (\n//                       <Button className=\"mr10\" onClick={handleConfirm}>\n//                         <ClearIcon />\n//                       </Button>\n//                     ) : (\n//                       <Button className=\"mr10\" onClick={handleConfirm}>\n//                         <DeleteOutlineIcon />\n//                       </Button>\n//                     )}\n//                     {showConfirm && (\n//                       <div>\n//                         <Dialog\n//                           open={showConfirm}\n//                           onClose={handleNo}\n//                           aria-labelledby=\"alert-dialog-title\"\n//                           aria-describedby=\"alert-dialog-description\"\n//                         >\n//                           <DialogTitle id=\"alert-dialog-title\">\n//                             {\"Confirm Delete\"}\n//                           </DialogTitle>\n//                           <DialogContent>\n//                             <DialogContentText id=\"alert-dialog-description\">\n//                               Are you sure to delete\n//                             </DialogContentText>\n//                           </DialogContent>\n//                           <DialogActions>\n//                             <Button\n//                               onClick={() => handleRemoveClick(i)}\n//                               color=\"primary\"\n//                               autoFocus\n//                             >\n//                               Yes\n//                             </Button>\n//                             <Button\n//                               onClick={handleNo}\n//                               color=\"primary\"\n//                               autoFocus\n//                             >\n//                               No\n//                             </Button>\n//                           </DialogActions>\n//                         </Dialog>\n//                       </div>\n//                     )}\n//                   </TableRow>\n//                 </div>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </Box>\n//     </TableBody>\n//   );\n// }\n\n// export default TableDemo;","map":{"version":3,"names":[],"sources":["/Users/vishnum/Downloads/frontend/src/components/pages/history.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import CreateIcon from \"@material-ui/icons/Create\";\n// import {\n//   Box,\n//   Button,\n//   Snackbar,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableRow\n// } from \"@material-ui/core\";\n// import DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\n// import AddBoxIcon from \"@material-ui/icons/AddBox\";\n// import DoneIcon from \"@material-ui/icons/Done\";\n// import ClearIcon from \"@material-ui/icons/Clear\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Alert from \"@material-ui/lab/Alert\";\n// import Dialog from \"@material-ui/core/Dialog\";\n// import DialogActions from \"@material-ui/core/DialogActions\";\n// import DialogContent from \"@material-ui/core/DialogContent\";\n// import DialogContentText from \"@material-ui/core/DialogContentText\";\n// import DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// // Creating styles\n// const useStyles = makeStyles({\n//   root: {\n//     \"& > *\": {\n//       borderBottom: \"unset\"\n//     }\n//   },\n//   table: {\n//     minWidth: 650\n//   },\n//   snackbar: {\n//     bottom: \"104px\"\n//   }\n// });\n\n// function TableDemo() {\n//   // Creating style object\n//   const classes = useStyles();\n\n//   // Defining a state named rows\n//   // which we can update by calling on setRows function\n//   const [rows, setRows] = useState([\n//     { id: 1, slno: \"\", complaints: \"\", duration: \"\", severity: \"\" }\n//   ]);\n\n//   // Initial states\n//   const [open, setOpen] = React.useState(false);\n//   const [isEdit, setEdit] = React.useState(false);\n//   const [disable, setDisable] = React.useState(true);\n//   const [showConfirm, setShowConfirm] = React.useState(false);\n\n//   // Function For closing the alert snackbar\n//   const handleClose = (event, reason) => {\n//     if (reason === \"clickaway\") {\n//       return;\n//     }\n//     setOpen(false);\n//   };\n\n//   // Function For adding new row object\n//   const handleAdd = () => {\n//     setRows([\n//       ...rows,\n//       {\n//         id: rows.length + 1,\n//         slno: \"\",\n//         complaints: \"\",\n//         duration: \"\",\n//         severity: \"\"\n//       }\n//     ]);\n//     setEdit(true);\n//   };\n\n//   // Function to handle edit\n//   const handleEdit = (i) => {\n//     // If edit mode is true setEdit will\n//     // set it to false and vice versa\n//     setEdit(!isEdit);\n//   };\n\n//   // Function to handle save\n//   const handleSave = () => {\n//     setEdit(!isEdit);\n//     setRows(rows);\n//     console.log(\"saved : \", rows);\n//     setDisable(true);\n//     setOpen(true);\n//   };\n\n//   // The handleInputChange handler can be set up to handle\n//   // many different inputs in the form, listen for changes\n//   // to input elements and record their values in state\n//   const handleInputChange = (e, index) => {\n//     setDisable(false);\n//     const { name, value } = e.target;\n//     const list = [...rows];\n//     list[index][name] = value;\n//     setRows(list);\n//   };\n\n//   // Showing delete confirmation to users\n//   const handleConfirm = () => {\n//     setShowConfirm(true);\n//   };\n\n//   // Handle the case of delete confirmation where\n//   // user click yes delete a specific row of id:i\n//   const handleRemoveClick = (i) => {\n//     const list = [...rows];\n//     list.splice(i, 1);\n//     setRows(list);\n//     setShowConfirm(false);\n//   };\n\n//   // Handle the case of delete confirmation\n//   // where user click no\n//   const handleNo = () => {\n//     setShowConfirm(false);\n//   };\n\n//   return (\n//     <TableBody>\n//       <Snackbar\n//         open={open}\n//         autoHideDuration={2000}\n//         onClose={handleClose}\n//         className={classes.snackbar}\n//       >\n//         <Alert onClose={handleClose} severity=\"success\">\n//           Record saved successfully!\n//         </Alert>\n//       </Snackbar>\n//       <Box margin={1}>\n//         <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//           <div>\n//             {isEdit ? (\n//               <div>\n//                 <Button onClick={handleAdd}>\n//                   <AddBoxIcon onClick={handleAdd} />\n//                   ADD\n//                 </Button>\n//                 {rows.length !== 0 && (\n//                   <div>\n//                     {disable ? (\n//                       <Button disabled align=\"right\" onClick={handleSave}>\n//                         <DoneIcon />\n//                         SAVE\n//                       </Button>\n//                     ) : (\n//                       <Button align=\"right\" onClick={handleSave}>\n//                         <DoneIcon />\n//                         SAVE\n//                       </Button>\n//                     )}\n//                   </div>\n//                 )}\n//               </div>\n//             ) : (\n//               <div>\n//                 <Button onClick={handleAdd}>\n//                   <AddBoxIcon onClick={handleAdd} />\n//                   ADD\n//                 </Button>\n//                 <Button align=\"right\" onClick={handleEdit}>\n//                   <CreateIcon />\n//                   EDIT\n//                 </Button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//         <TableRow align=\"center\"></TableRow>\n\n//         <Table\n//           className={classes.table}\n//           size=\"small\"\n//           aria-label=\"a dense table\"\n//         >\n//           <TableHead>\n//             <TableRow>\n//               <TableCell></TableCell>\n//               <TableCell></TableCell>\n//               <TableCell></TableCell>\n//               <TableCell align=\"center\"></TableCell>\n//               <TableCell align=\"center\"></TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {rows.map((row, i) => {\n//               return (\n//                 <div>\n//                   <TableRow>\n//                     {isEdit ? (\n//                       <div>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Sl no\"\n//                             value={row.slno}\n//                             name=\"slno\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Complaints\"\n//                             value={row.complaints}\n//                             name=\"complaints\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Duration\"\n//                             name=\"duration\"\n//                             value={row.duration}\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                         <TableCell padding=\"none\">\n//                           <input\n//                             placeholder=\"Severity\"\n//                             value={row.severity}\n//                             name=\"severity\"\n//                             onChange={(e) => handleInputChange(e, i)}\n//                           />\n//                         </TableCell>\n//                       </div>\n//                     ) : (\n//                       <div>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {row.slno}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {row.complaints}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\" align=\"center\">\n//                           {row.duration}\n//                         </TableCell>\n//                         <TableCell component=\"th\" scope=\"row\" align=\"center\">\n//                           {row.severity}\n//                         </TableCell>\n//                         <TableCell\n//                           component=\"th\"\n//                           scope=\"row\"\n//                           align=\"center\"\n//                         ></TableCell>\n//                       </div>\n//                     )}\n//                     {isEdit ? (\n//                       <Button className=\"mr10\" onClick={handleConfirm}>\n//                         <ClearIcon />\n//                       </Button>\n//                     ) : (\n//                       <Button className=\"mr10\" onClick={handleConfirm}>\n//                         <DeleteOutlineIcon />\n//                       </Button>\n//                     )}\n//                     {showConfirm && (\n//                       <div>\n//                         <Dialog\n//                           open={showConfirm}\n//                           onClose={handleNo}\n//                           aria-labelledby=\"alert-dialog-title\"\n//                           aria-describedby=\"alert-dialog-description\"\n//                         >\n//                           <DialogTitle id=\"alert-dialog-title\">\n//                             {\"Confirm Delete\"}\n//                           </DialogTitle>\n//                           <DialogContent>\n//                             <DialogContentText id=\"alert-dialog-description\">\n//                               Are you sure to delete\n//                             </DialogContentText>\n//                           </DialogContent>\n//                           <DialogActions>\n//                             <Button\n//                               onClick={() => handleRemoveClick(i)}\n//                               color=\"primary\"\n//                               autoFocus\n//                             >\n//                               Yes\n//                             </Button>\n//                             <Button\n//                               onClick={handleNo}\n//                               color=\"primary\"\n//                               autoFocus\n//                             >\n//                               No\n//                             </Button>\n//                           </DialogActions>\n//                         </Dialog>\n//                       </div>\n//                     )}\n//                   </TableRow>\n//                 </div>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </Box>\n//     </TableBody>\n//   );\n// }\n\n// export default TableDemo;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}